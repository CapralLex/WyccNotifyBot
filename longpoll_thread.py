import os
from time import sleep, time, ctime

from loguru import logger
from requests.exceptions import ConnectionError
from vk_api import VkApi
from vk_api.longpoll import VkLongPoll, VkEventType

import file_handler
import main
import vk_
from file_handler import read_config, write_users


MSG_HELLO = '''–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üòé
    
–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    
–ï—Å–ª–∏ —Ç–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É "–ø–æ–º–æ—â—å" –∏–ª–∏ "help"'''

MSG_HELP = '''–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É "–ù–∞—á–∞—Ç—å".

–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Steam - –µ—Å–ª–∏ –®—É—Å—Å –∏–≥—Ä–∞–ª –≤ –∏–≥—Ä—É —á–µ—Ä–µ–∑ Steam - –ø—Ä–∏—à–ª—é –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏.
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Twitch - –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –®—É—Å—Å –∑–∞–ø—É—Å—Ç–∏—Ç —Å—Ç—Ä–∏–º –∏–ª–∏ —Å–º–µ–Ω–∏—Ç –∏–≥—Ä—É –Ω–∞ —Å—Ç—Ä–∏–º–µ.
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ù–∞_—Å—Ç—Ä–∏–º–µ_–±–∞–Ω–¥—ã - –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–µ–ª–∏–∫ —à–∞–Ω—Å, —á—Ç–æ –®—É—Å—Å —Å–∏–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∏–º–µ —É –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ –±–∞–Ω–¥—ã.
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram - –ø–µ—Ä–µ—à–ª—é –ø–æ—Å—Ç –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ –®—É—Å—Å–∞.
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Youtube - –µ—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–ª–∏ –≤—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã–π–¥–µ—Ç –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ - –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –µ–≥–æ.

–ü—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ù–∞_—Å—Ç—Ä–∏–º–µ_–±–∞–Ω–¥—ã" –∏ —Ç.–ø.'''

ADMIN_HELP = '''/help
/backup
/get_users
/get_logs
/send [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] {—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è}
/send_test [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] {—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è}
/stop'''


def vk_lp_auth():
    vk_session = VkApi(token=read_config('vk', 'token'))
    longpoll = VkLongPoll(vk_session)
    return longpoll


@logger.catch(onerror=lambda _: main.restart_thread(start_longpoll, 'longpoll'))
def start_longpoll():

    print('Longpoll thread running')

    available_commands = file_handler.read_users(raw=True).keys()
    admins = [int(_) for _ in read_config(section='data', key='admins', list_=True)]
    try:
        longpoll = vk_lp_auth()
        for event in longpoll.listen():

            # print(event.__dict__)

            if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                text = str(event.text).lower().split(' ')
                user_id = event.user_id

                # --- start ---
                if text[0] == '–Ω–∞—á–∞—Ç—å' or text[0] == 'start' or text[0] == '—Å—Ç–∞—Ä—Ç':
                    debug_timer = time()
                    write_status = write_users(user=user_id, category='all')
                    if write_status:
                        vk_.send_with_keyboard(user_id=user_id, message=MSG_HELLO)
                        logger.debug(f'{user_id} subscribed to all. Complete in {time() - debug_timer}')
                    else:
                        vk_.send_with_keyboard(user_id=user_id, message='–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')

                # --- main commands ---
                elif len(text) == 3 and text[2] in available_commands:
                    debug_timer = time()
                    if text[0] == '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' and text[1] == '–Ω–∞':
                        write_users(user=user_id, category=text[2])
                        vk_.send_with_keyboard(user_id=user_id,
                                               message=f'–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {text[2]}')
                        logger.debug(f'{user_id} subscribed on {text[2]}. Complete in {time()-debug_timer}')
                    elif text[0] == '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è' and text[1] == '–æ—Ç':
                        file_handler.delete_users(user=user_id, category=text[2])
                        vk_.send_with_keyboard(user_id=user_id,
                                               message=f'–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {text[2]}')
                        logger.debug(f'{user_id} unsubscribed from {text[2]}. Complete in {time()-debug_timer}')

                # --- help ---
                elif text[0] == '–ø–æ–º–æ—â—å' or text[0] == 'help' or text[0] == '—Ö–µ–ª–ø':
                    vk_.send_once(user_id=user_id, message=MSG_HELP)

                elif text[0] == '–µ–Ω–æ—Ç' and text[1] == '–ø–∏–¥–æ—Ä':
                    vk_.send_photo_once(user_id=user_id, photo_link='photo-190892622_457239054', message='–í–æ—Ç –æ–Ω - —Ä–æ–∫–æ–≤–æ–π –º—É–∂—á–∏–Ω–∞ üòéü§ôüèª')

                # --- –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã ---
                elif event.peer_id in admins:

                    if text[0] == '/help':
                        vk_.send_once(user_id=user_id, message=ADMIN_HELP)

                    elif text[0] == '/backup':
                        vk_.send_doc_once(file='users.json', message=ctime(time()), user_id=user_id)

                    elif text[0] == '/get_users':
                        user_stats = file_handler.get_all_users()
                        vk_.send_once(user_id=user_id, message=str(user_stats))

                    elif text[0] == '/get_logs':
                        vk_.send_doc_once(file='logs.log', message=ctime(time()), user_id=user_id)

                    elif text[0] == '/send' or text[0] == '/send_test':
                        _category = event.text[event.text.find('[')+1:event.text.find(']')]
                        _text = event.text[event.text.find('{')+1:event.text.find('}')]

                        if _category not in available_commands:
                            vk_.send_once(user_id=user_id, message='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                            continue

                        if text[0] == '/send':
                            vk_.send(message=_text, category=_category)
                        else:
                            vk_.send_once(user_id=user_id, message=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: "{_category}"\n\n{_text}')

                    elif text[0] == '/stop':
                        vk_.send_once(user_id=user_id, message='–í—ã–∫–ª—é—á–µ–Ω–∏–µ...')
                        os.abort()

                    else:
                        vk_.send_once(user_id=user_id, message='''–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üòï 
                                                                –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å".''')
                else:
                    vk_.send_once(user_id=user_id, message='''–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üòï 
                                                            –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å".''')

    except ConnectionError:
        sleep(5)
        start_longpoll()

    except Exception as exception:
        restart_timer = int(read_config('data', 'delay'))
        logger.error(f'{exception} | LONGPOLL_T')
        print(f'Restart after {restart_timer} seconds (longpoll) ...')
        sleep(restart_timer)
        start_longpoll()
